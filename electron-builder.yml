# electron-builder 打包配置文件

# 安装后的应用名 如果未在build配置内部指定，则使用productName在顶层定义的属性package.json。如果未在 的顶层指定，package.json则使用 name 属性。
productName: 打印机
copyright: Copyright © 2023 miniOcean404 # 版权
artifactName: '${productName}-${platform}-${arch}-${version}.${ext}' # 应用程序包名
appId: com.davinci-print.app
# "store" | "normal"| "maximum" store 可以显着减少构建时间。
compression: store
#  添加控制变量
#  打包线上应用，控制变量为 production，此设置会直接在打包的 package.json 中加入 "env" = "production" 这个变量，
#  可以在文件中引用 const pkg = require('./package.json');  此时 pkg.env 等于 'production'
extraMetadata:
  env: production
# 打包输入目录
directories:
  app: release/app
  buildResources: assets
  output: release/build

# 在打包和签名之后（但在打包成可分发格式之前）运行的函数（或文件或模块 ID 的路径）
afterSign: .erb/scripts/notarize.js

# 除了 package.json 中 dependencies 外，另外需要打包的文件添加到此处,只能是文件夹,必须有 dist
# 相对于 release/app 目录下，但是每次打包 build 目录都会消失，所以这个目录下什么东西都没有
# 输出目录为 electron/build/win-unpacked/resources/app
files:
  - dist
  - from: '../../node_modules'
    to: '../test'

# 打包后拷贝静态文件到指定位置 文件起始位置是 相对于项目根目录
extraResources:
  - from: assets
    to: ./assets
    filter:
      - '!webview' # 拷贝 assets 的文件夹不包括 webview 文件夹
  - from: assets/webview
    to: ./app/webview

# 打包后拷贝文件到指定位置 一般是 dll 文件
extraFiles:
  - from: assets
    to: ./extraFiles

# 是否使用 Electron asar 的归档格式将应用程序的源代码打包到归档(asar)中
asar: false
# 与应用程序目录相关的全局模式，它指定在创建asar存档时要解压缩的文件。
asarUnpack: '**\*.{node,dll}'

# url scheme 协议配置 针对 mac
protocols: [{ name: 'printapp', schemes: ['://'], role: 'Viewer' }]

# 所有平台：7z, zip, tar.xz, tar.lz, tar.gz, tar.bz2, dir（解压目录）。
# ['msi', 'nsis']
# nsis安装程序、
# nsis-web（Web 安装程序）、
# portable（无需安装的便携式应用程序）、
# AppX（Windows 商店）、
# Squirrel.Windows
win:
  # 应用程序图标的路径。256*256的ico格式或png格式文件
  icon: ./assets/icons/icon.ico
  # 商标和注册商标。
  legalTrademarks: Copyright © 2023 miniOcean404
  # nsis, nsis-web(Web 安装程序), portable(无需安装的便携式appx应用程序), msi,
  # squirrel, 7z, zip, tar.xz, tar.lz, tar.gz, tar.bz2,dir
  # AppX 包只能在 Windows 10 上构建
  target:
    - target: nsis
      arch:
        - x64 # 64位
#    - target: portable
#      arch:
#        - x64

nsis:
  oneClick: false # 是否一键安装
  perMachine: true #  是否开启安装时权限限制（此电脑或当前用户）true 表示此电脑，false 代表当前用户
  allowElevation: true # 允许请求提升。 如果为 false，则用户必须使用提升的权限重新启动安装程序。
  allowToChangeInstallationDirectory: true # 允许修改安装目录
  installerIcon: assets/icons/icon.ico # 安装图标
  uninstallerIcon: assets/icons/icon.ico # 卸载图标
  # installerHeader: xx/xx.bmp # 仅限辅助安装程序 MUI_HEADERIMAGE 相对于构建资源或项目目录。
  installerHeaderIcon: assets/icons/icon.ico # 仅限一键式安装程序。标题图标的路径（进度条上方），相对于构建资源或项目目录。默认为 build/installerHeaderIcon.ico 或应用程序图标
  # installerSidebar # 仅限辅助安装程序。
  # uninstallerSidebar: # 仅限辅助安装程序。
  uninstallDisplayName: 打印机 # 控制面板中的卸载程序显示名称
  deleteAppDataOnUninstall: true # 仅限一键式安装程序。卸载时是否删除应用数据。

  displayLanguageSelector: false # 是否显示语言选择对话框。不推荐（默认情况下将使用操作系统语言检测）
  # installerLanguages #  安装程序语言（例如en_US，de_DE)
  # multiLanguageInstallerBoolean # 是否创建多语言安装程序。默认为unicode选项值
  language: '2052' # 卸载后删除用户数据
  packElevateHelper: # 是否打包 elevate 可执行文件（如果使用每台机器的安装程序或将来可以使用，则需要电子更新程序）如果忽略 perMachine 则为true
  runAfterFinish: true # 完成后是否运行已安装的应用程序。对于辅助安装程序，相应的复选框将被删除。
  createDesktopShortcut: always # 创建桌面图标
  createStartMenuShortcut: true # 创建开始菜单图标
  menuCategory: false # 是否为开始菜单快捷方式和程序文件目录创建子菜单。如果true，将使用公司名称。或字符串值
  shortcutName: 打印机 # 快捷方式名称 默认为应用程序名称
  # guid: "x", //注册表名字，不推荐修改
  include: './script/windows-installer.nsh' # 包含的自定义nsis脚本 这个对于构建需求严格得安装过程相当有用。
  # script: 'build/script/installer.nsh' // NSIS脚本的路径，用于自定义安装程序。 默认为build / installer.nsi

publish:
  # 指定服务器类型，generic 通用服务器，也可以是 github 等
  provider: github
  owner: electron-react-boilerplate
  repo: electron-react-boilerplate
  # url: '' # electron应用的更新地址

# 设置 electron 源
# https://www.electron.build/configuration/configuration.html#configuration
electronDownload:
  mirror: http://npm.taobao.org/mirrors/electron/
